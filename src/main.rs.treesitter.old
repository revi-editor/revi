use tree_sitter::{Node, Parser};

fn main() {
    let mut parser = Parser::new();
    parser
        .set_language(&tree_sitter_rust::language())
        .expect("Error loading Rust grammar");

    let source_code = "fn main() {
        println!(\"Hello, World!\");
        other_function();
    }
    struct Point {
        x: i32,
        y: i32,
    }";

    let tree = parser.parse(source_code, None).unwrap();
    let root_node = tree.root_node();
    let mut cursor = root_node.walk();
    let starting_node = cursor.goto_first_child_for_byte(20).unwrap();
    cursor.goto_descendant(starting_node);
    let node = cursor.node();
    traverse_tree(source_code.as_bytes(), &node, 0);
}

fn traverse_tree(source: &[u8], node: &Node, depth: usize) {
    // Print the node's kind and text
    let kind = node.kind();
    let text = node.utf8_text(source).unwrap();
    let span = node.range();
    println!(
        "{}..{} -> {:?} : {}",
        span.start_byte, span.end_byte, kind, text
    );

    let mut cursor = node.walk();
    // Iterate over the node's children
    for child in node.children(&mut cursor) {
        traverse_tree(source, &&child, depth + 1);
    }
}
